#include "orderbook.cpp"
#include <thread>
#include <random>
#include <iostream>
#include <chrono>
#include <vector>
#include <atomic>
#include <mutex>

using namespace std;

mutex orderbookMutex;
atomic<int> totalOrderCount(0);

void generateOrders(Orderbook &orderbook, int durationSeconds, int threadId) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> priceDist(50.0, 100.0);
    uniform_int_distribution<> quantityDist(1, 100);
    uniform_int_distribution<> sideDist(0, 1);

    auto startTime = chrono::high_resolution_clock::now();
    int orderCount = 0;

    while (true) {
        auto currentTime = chrono::high_resolution_clock::now();
        if (chrono::duration_cast<chrono::seconds>(currentTime - startTime).count() >= durationSeconds) {
            break;
        }

        Side side = sideDist(gen) == 0 ? Side::Bid : Side::Ask;
        double price = priceDist(gen);
        int quantity = quantityDist(gen);

        Order order(OrderType::Limit, price, side, quantity);

        {
            lock_guard<mutex> lock(orderbookMutex);
            orderbook.addOrder(OrderType::Limit, price, side, quantity);
        }
        orderCount++;
    }
    totalOrderCount += orderCount;
}

int main() {
    Orderbook orderbook;
    
    // Multi-Thread Auto Add Order ~ 900K orders
    const int numThreads = 4;
    const int durationSeconds = 10;

    vector<thread> threads;
    for (int i = 0; i < numThreads; ++i) {
        threads.emplace_back(generateOrders, ref(orderbook), durationSeconds, i + 1);
    }

    for (auto &t : threads) {
        t.join();
    }

    cout << "\nFinal Orderbook:\n";
    orderbook.printOrderBook();
    cout << "\nTotal orders generated by all threads: " << totalOrderCount.load() << "\n";

    //Simple Manual Add Order
    // orderbook.addOrder(OrderType::Limit, 150, Side::Ask, 200);
    // orderbook.addOrder(OrderType::Limit, 140, Side::Ask, 200);
    // orderbook.addOrder(OrderType::Limit, 130, Side::Ask, 200);
    // orderbook.addOrder(OrderType::Limit, 120, Side::Ask, 200);
    // orderbook.addOrder(OrderType::Limit, 110, Side::Ask, 200);
    // orderbook.addOrder(OrderType::Limit, 100, Side::Ask, 200);
    
    // orderbook.addOrder(OrderType::Limit, 100, Side::Bid, 200);
    // orderbook.addOrder(OrderType::Limit, 110, Side::Bid, 300);
    // orderbook.addOrder(OrderType::Limit, 90, Side::Bid, 200);
    // orderbook.addOrder(OrderType::Limit, 90, Side::Bid, 200);
    // orderbook.addOrder(OrderType::Limit, 90, Side::Bid, 200);
    // orderbook.addOrder(OrderType::Limit, 90, Side::Bid, 200);
    // orderbook.addOrder(OrderType::Limit, 90, Side::Bid, 200);

    // orderbook.printOrderBook();
    char action;
    while (true)
    {
        cout << "Which action do you want to do ?" << "\n(1)Place Limit Order  (2)Print Order Book (3)Quit\n";
        cin >> action;
        if (action == '1')
        {
            char sideChoice;
            double price;
            Quantity quantity;
            cout << "(1)Buy, place bids (2)Sell, place asks\n";
            cin >> sideChoice;
            Side side;
            side = sideChoice == '1' ? Side::Bid : Side::Ask;

            cout << "What price level do you want to place order?\n";
            cin >> price;


            cout << "How many shares do you want to place?\n";
            cin >> quantity;

            orderbook.addOrder(OrderType::Limit, price, side, quantity);
        }
        else if (action == '2')
        {
            orderbook.printOrderBook();
        }
        else
        {
            cout << "Quit\n"; 
            break;
        }
    }

    return 0;
}
